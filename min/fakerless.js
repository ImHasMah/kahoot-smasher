var O,G=new Uint8Array(16);function W(){if(!O){if(O=typeof crypto!=="undefined"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!O)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported")}return O(G)}function k(U,D=0){return p[U[D+0]]+p[U[D+1]]+p[U[D+2]]+p[U[D+3]]+"-"+p[U[D+4]]+p[U[D+5]]+"-"+p[U[D+6]]+p[U[D+7]]+"-"+p[U[D+8]]+p[U[D+9]]+"-"+p[U[D+10]]+p[U[D+11]]+p[U[D+12]]+p[U[D+13]]+p[U[D+14]]+p[U[D+15]]}var p=[];for(let U=0;U<256;++U)p.push((U+256).toString(16).slice(1));var L=typeof crypto!=="undefined"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),X={randomUUID:L};var S=function(U,D,A){if(X.randomUUID&&!D&&!U)return X.randomUUID();U=U||{};const E=U.random||(U.rng||W)();if(E[6]=E[6]&15|64,E[8]=E[8]&63|128,D){A=A||0;for(let q=0;q<16;++q)D[A+q]=E[q];return D}return k(E)},Y=S;async function B(pin,name){const generatedUuid=Y();if(Z)document.cookie=`generated-uuid=${generatedUuid}`;const reserveResponse=await fetch(`https://kahoot.it/reserve/session/${pin}/?${Date.now()}`,Z?void 0:{headers:{cookie:`generated-uuid=${generatedUuid}`}}),sessionToken=reserveResponse.headers.get("x-kahoot-session-token"),{challenge}=await reserveResponse.json(),challengeInput=challenge.slice(19,119),offsetCode=challenge.split("var offset = ")[1].split(";")[0].replace(/\s/g,"");if(/[^\d()*+]/.test(offsetCode)){console.warn("Kahoot just attempted to run the following code on your computer:",offsetCode,"\nLuckily, you were protected.");return}const offset=eval(offsetCode),challengeResponse=challengeInput.split("").map((U,D)=>String.fromCharCode((U.charCodeAt(0)*D+offset)%77+48)).join(""),xorResult=String.fromCharCode(...atob(sessionToken).split("").map((U,D)=>U.charCodeAt(0)^challengeResponse.charCodeAt(D))),ws=new WebSocket(`wss://kahoot.it/cometd/${pin}/${xorResult}`,Z?void 0:{headers:{cookie:`generated-uuid=${generatedUuid}`}});ws.onopen=async()=>{let U=1;const D=(z)=>{U++,F&&console.log("Sent",z),ws.send(JSON.stringify(z))};ws.addEventListener("message",(z)=>{F&&console.log("Received",JSON.parse(z.data))});const A=(z)=>new Promise((P)=>{const J=(N)=>{N=N;const K=JSON.parse(N.data);if(!z||z(K))P(K),ws.removeEventListener("message",J)};ws.addEventListener("message",J)});D([{id:U.toString(),version:"1.0",minimumVersion:"1.0",channel:"/meta/handshake",supportedConnectionTypes:["websocket","long-polling","callback-polling"],advice:{timeout:60000,interval:0},ext:{ack:!0,timesync:{tc:Date.now(),l:0,o:0}}}]);const E=await A((z)=>z?.[0]?.clientId),{clientId:q}=E[0];D([{id:U.toString(),channel:"/meta/connect",connectionType:"websocket",advice:{timeout:0},clientId:q,ext:{ack:0,timesync:{tc:Date.now(),l:0,o:0}}}]),ws.addEventListener("message",async(z)=>{const P=z.data,J=JSON.parse(P);if(J?.[0]?.channel==="/meta/connect")D([{id:U.toString(),channel:"/meta/connect",connectionType:"websocket",clientId:q,ext:{ack:J[0].ext.ack}}]);if(J?.[0]?.channel==="/service/player"&&J[0].data.id===2){await new Promise((K)=>setTimeout(K,Math.floor(Math.random()*3000)));const N=JSON.parse(J[0].data.content);if(N.type==="quiz")D([{id:U.toString(),channel:"/service/controller",data:{gameid:pin,type:"message",host:"kahoot.it",id:45,content:JSON.stringify({type:"quiz",choice:Math.floor(Math.random()*N.numberOfChoices),questionIndex:N.gameBlockIndex})},clientId:q,ext:{}}]);else if(N.type==="multiple_select_quiz")D([{id:U.toString(),channel:"/service/controller",data:{gameid:pin,type:"message",host:"kahoot.it",id:45,content:JSON.stringify({type:"multiple_select_quiz",choice:new Array(N.numberOfChoices).fill(0).map((K,Q)=>Q).filter(()=>Math.random()<0.5),questionIndex:N.gameBlockIndex})},clientId:q,ext:{}}]);else if(N.type==="jumble")D([{id:U.toString(),channel:"/service/controller",data:{gameid:pin,type:"message",host:"kahoot.it",id:45,content:JSON.stringify({type:"jumble",choice:new Array(N.numberOfChoices).fill(0).map((K,Q)=>Q).sort(()=>Math.random()-0.5),questionIndex:N.gameBlockIndex})},clientId:q,ext:{}}]);else if(N.type==="open_ended")D([{id:U.toString(),channel:"/service/controller",data:{gameid:pin,type:"message",host:"kahoot.it",id:45,content:JSON.stringify({type:"open_ended",text:"amogus",questionIndex:N.gameBlockIndex})},clientId:q,ext:{}}]);else if(N.type==="slider")D([{id:U.toString(),channel:"/service/controller",data:{gameid:pin,type:"message",host:"kahoot.it",id:45,content:JSON.stringify({type:"slider",choice:Math.floor(Math.random()*(N.maxRange-N.minRange+1)/N.step)*N.step+N.minRange,questionIndex:N.gameBlockIndex})},clientId:q,ext:{}}])}}),await A();const $=U.toString();D([{id:$,channel:"/service/controller",data:{type:"login",gameid:pin,host:"kahoot.it",name,content:JSON.stringify({device:{userAgent:"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.3"},screen:{width:1920,height:1080}})},clientId:q,ext:{}}]),await A((z)=>z?.[0]?.id===$),D([{id:U.toString(),channel:"/service/controller",data:{gameid:pin,type:"message",host:"kahoot.it",id:16,content:JSON.stringify({usingNamerator:!1})},clientId:q,ext:{}}])}}var F=!1,Z="window"in globalThis,C=prompt("Game PIN:"),_=parseInt(prompt("How many bots to add?"));if(isNaN(_))_=500,console.error("Invalid number (defaulting to 500)");for(let U=0;U<_;U++){const D=Math.floor(Math.random()*1e6).toString();console.log("Joining as",D),await Promise.allSettled([B(C,D).then(()=>console.log("Joined as",D)).catch((A)=>{console.error(A)}),new Promise((A)=>setTimeout(A,66.66666666666667))])}
